def diffieHellman(p : int, g: int, privateA : int, privateB : int) -> tuple[int, int]:
    """
    Given two public numbers and two private keys, performs a Diffie-Hellman key exchange to generate a shared secret.

    Parameters:
        p (int): the first agreed upon public number, a prime modulus.
        g (int): the second agreed upon public number, a primitive root base to p.
        privateA (int): the first private key value.
        privateB (int): the second private key value.
    Returns:
        secret (tuple[int, int]): the shared secret generated by each side, secret[0] == secret[1].
    """
    publicA = (g**privateA) % p
    publicB = (g**privateB) % p
    #at this point, both individuals would then exchange their calculated values

    secretA = (publicB ** privateA) % p 
    secretB = (publicA ** privateB) % p

    return (secretA, secretB)

print(diffieHellman(23, 5, 4, 3))